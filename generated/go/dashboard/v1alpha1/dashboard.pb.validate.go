// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: guance/io/json/dashboard/v1alpha1/dashboard.proto

package dashboardv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Dashboard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dashboard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dashboard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DashboardMultiError, or nil
// if none found.
func (m *Dashboard) ValidateAll() error {
	return m.validate(true)
}

func (m *Dashboard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDashboardBindSet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("DashboardBindSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("DashboardBindSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardValidationError{
					field:  fmt.Sprintf("DashboardBindSet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDashboardExtend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "DashboardExtend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "DashboardExtend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDashboardExtend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DashboardValidationError{
				field:  "DashboardExtend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDashboardMapping() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("DashboardMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("DashboardMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardValidationError{
					field:  fmt.Sprintf("DashboardMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DashboardOwnerType

	// no validation rules for DashboardType

	if all {
		switch v := interface{}(m.GetIconSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "IconSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "IconSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIconSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DashboardValidationError{
				field:  "IconSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "Main",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DashboardValidationError{
					field:  "Main",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DashboardValidationError{
				field:  "Main",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Summary

	for idx, item := range m.GetTagInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("TagInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("TagInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardValidationError{
					field:  fmt.Sprintf("TagInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Thumbnail

	// no validation rules for Title

	if len(errors) > 0 {
		return DashboardMultiError(errors)
	}

	return nil
}

// DashboardMultiError is an error wrapping multiple validation errors returned
// by Dashboard.ValidateAll() if the designated constraints aren't met.
type DashboardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardMultiError) AllErrors() []error { return m }

// DashboardValidationError is the validation error returned by
// Dashboard.Validate if the designated constraints aren't met.
type DashboardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardValidationError) ErrorName() string { return "DashboardValidationError" }

// Error satisfies the builtin error interface
func (e DashboardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on IconSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IconSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IconSet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IconSetMultiError, or nil if none found.
func (m *IconSet) ValidateAll() error {
	return m.validate(true)
}

func (m *IconSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Icon

	// no validation rules for Url

	if len(errors) > 0 {
		return IconSetMultiError(errors)
	}

	return nil
}

// IconSetMultiError is an error wrapping multiple validation errors returned
// by IconSet.ValidateAll() if the designated constraints aren't met.
type IconSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IconSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IconSetMultiError) AllErrors() []error { return m }

// IconSetValidationError is the validation error returned by IconSet.Validate
// if the designated constraints aren't met.
type IconSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IconSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IconSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IconSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IconSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IconSetValidationError) ErrorName() string { return "IconSetValidationError" }

// Error satisfies the builtin error interface
func (e IconSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIconSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IconSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IconSetValidationError{}

// Validate checks the field values on Colors with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Colors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Colors with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ColorsMultiError, or nil if none found.
func (m *Colors) ValidateAll() error {
	return m.validate(true)
}

func (m *Colors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Color

	// no validation rules for Key

	// no validation rules for Name

	if len(errors) > 0 {
		return ColorsMultiError(errors)
	}

	return nil
}

// ColorsMultiError is an error wrapping multiple validation errors returned by
// Colors.ValidateAll() if the designated constraints aren't met.
type ColorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColorsMultiError) AllErrors() []error { return m }

// ColorsValidationError is the validation error returned by Colors.Validate if
// the designated constraints aren't met.
type ColorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColorsValidationError) ErrorName() string { return "ColorsValidationError" }

// Error satisfies the builtin error interface
func (e ColorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColorsValidationError{}

// Validate checks the field values on Levels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Levels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Levels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LevelsMultiError, or nil if none found.
func (m *Levels) ValidateAll() error {
	return m.validate(true)
}

func (m *Levels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LineColor

	// no validation rules for Operation

	if len(errors) > 0 {
		return LevelsMultiError(errors)
	}

	return nil
}

// LevelsMultiError is an error wrapping multiple validation errors returned by
// Levels.ValidateAll() if the designated constraints aren't met.
type LevelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LevelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LevelsMultiError) AllErrors() []error { return m }

// LevelsValidationError is the validation error returned by Levels.Validate if
// the designated constraints aren't met.
type LevelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LevelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LevelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LevelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LevelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LevelsValidationError) ErrorName() string { return "LevelsValidationError" }

// Error satisfies the builtin error interface
func (e LevelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLevels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LevelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LevelsValidationError{}

// Validate checks the field values on Units with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Units) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Units with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UnitsMultiError, or nil if none found.
func (m *Units) ValidateAll() error {
	return m.validate(true)
}

func (m *Units) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for Unit

	if len(errors) > 0 {
		return UnitsMultiError(errors)
	}

	return nil
}

// UnitsMultiError is an error wrapping multiple validation errors returned by
// Units.ValidateAll() if the designated constraints aren't met.
type UnitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitsMultiError) AllErrors() []error { return m }

// UnitsValidationError is the validation error returned by Units.Validate if
// the designated constraints aren't met.
type UnitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitsValidationError) ErrorName() string { return "UnitsValidationError" }

// Error satisfies the builtin error interface
func (e UnitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitsValidationError{}

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Settings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingsMultiError, or nil
// if none found.
func (m *Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChartType

	for idx, item := range m.GetColors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Colors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Colors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsValidationError{
					field:  fmt.Sprintf("Colors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CompareTitle

	// no validation rules for CompareType

	// no validation rules for CurrentChartType

	// no validation rules for Density

	// no validation rules for FixedTime

	// no validation rules for IsPercent

	// no validation rules for IsTimeInterval

	for idx, item := range m.GetLevels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Levels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Levels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsValidationError{
					field:  fmt.Sprintf("Levels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OpenCompare

	// no validation rules for OpenStack

	// no validation rules for ShowFieldMapping

	// no validation rules for ShowLine

	// no validation rules for ShowTitle

	// no validation rules for StackType

	// no validation rules for TimeInterval

	// no validation rules for TitleDesc

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for XAxisShowType

	if len(errors) > 0 {
		return SettingsMultiError(errors)
	}

	return nil
}

// SettingsMultiError is an error wrapping multiple validation errors returned
// by Settings.ValidateAll() if the designated constraints aren't met.
type SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsMultiError) AllErrors() []error { return m }

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

// Validate checks the field values on Extend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExtendMultiError, or nil if none found.
func (m *Extend) ValidateAll() error {
	return m.validate(true)
}

func (m *Extend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FixedTime

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtendValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtendValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtendValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtendMultiError(errors)
	}

	return nil
}

// ExtendMultiError is an error wrapping multiple validation errors returned by
// Extend.ValidateAll() if the designated constraints aren't met.
type ExtendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtendMultiError) AllErrors() []error { return m }

// ExtendValidationError is the validation error returned by Extend.Validate if
// the designated constraints aren't met.
type ExtendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendValidationError) ErrorName() string { return "ExtendValidationError" }

// Error satisfies the builtin error interface
func (e ExtendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendValidationError{}

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupMultiError, or nil if none found.
func (m *Group) ValidateAll() error {
	return m.validate(true)
}

func (m *Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GroupMultiError(errors)
	}

	return nil
}

// GroupMultiError is an error wrapping multiple validation errors returned by
// Group.ValidateAll() if the designated constraints aren't met.
type GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMultiError) AllErrors() []error { return m }

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}

// Validate checks the field values on Pos with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pos with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PosMultiError, or nil if none found.
func (m *Pos) ValidateAll() error {
	return m.validate(true)
}

func (m *Pos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for H

	// no validation rules for I

	// no validation rules for W

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return PosMultiError(errors)
	}

	return nil
}

// PosMultiError is an error wrapping multiple validation errors returned by
// Pos.ValidateAll() if the designated constraints aren't met.
type PosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PosMultiError) AllErrors() []error { return m }

// PosValidationError is the validation error returned by Pos.Validate if the
// designated constraints aren't met.
type PosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PosValidationError) ErrorName() string { return "PosValidationError" }

// Error satisfies the builtin error interface
func (e PosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PosValidationError{}

// Validate checks the field values on Filters with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filters with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FiltersMultiError, or nil if none found.
func (m *Filters) ValidateAll() error {
	return m.validate(true)
}

func (m *Filters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logic

	// no validation rules for Name

	// no validation rules for Op

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return FiltersMultiError(errors)
	}

	return nil
}

// FiltersMultiError is an error wrapping multiple validation errors returned
// by Filters.ValidateAll() if the designated constraints aren't met.
type FiltersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FiltersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FiltersMultiError) AllErrors() []error { return m }

// FiltersValidationError is the validation error returned by Filters.Validate
// if the designated constraints aren't met.
type FiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiltersValidationError) ErrorName() string { return "FiltersValidationError" }

// Error satisfies the builtin error interface
func (e FiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiltersValidationError{}

// Validate checks the field values on QueryFuncs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryFuncs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFuncs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryFuncsMultiError, or
// nil if none found.
func (m *QueryFuncs) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFuncs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryFuncsMultiError(errors)
	}

	return nil
}

// QueryFuncsMultiError is an error wrapping multiple validation errors
// returned by QueryFuncs.ValidateAll() if the designated constraints aren't met.
type QueryFuncsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFuncsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFuncsMultiError) AllErrors() []error { return m }

// QueryFuncsValidationError is the validation error returned by
// QueryFuncs.Validate if the designated constraints aren't met.
type QueryFuncsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFuncsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFuncsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFuncsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFuncsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFuncsValidationError) ErrorName() string { return "QueryFuncsValidationError" }

// Error satisfies the builtin error interface
func (e QueryFuncsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFuncs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFuncsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFuncsValidationError{}

// Validate checks the field values on Query with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Query) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Query with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QueryMultiError, or nil if none found.
func (m *Query) ValidateAll() error {
	return m.validate(true)
}

func (m *Query) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for Code

	// no validation rules for DataSource

	// no validation rules for Field

	// no validation rules for FieldFunc

	// no validation rules for FieldType

	// no validation rules for Fill

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupByTime

	// no validation rules for Namespace

	// no validation rules for Q

	for idx, item := range m.GetQueryFuncs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("QueryFuncs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("QueryFuncs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  fmt.Sprintf("QueryFuncs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Type

	if len(errors) > 0 {
		return QueryMultiError(errors)
	}

	return nil
}

// QueryMultiError is an error wrapping multiple validation errors returned by
// Query.ValidateAll() if the designated constraints aren't met.
type QueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMultiError) AllErrors() []error { return m }

// QueryValidationError is the validation error returned by Query.Validate if
// the designated constraints aren't met.
type QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryValidationError) ErrorName() string { return "QueryValidationError" }

// Error satisfies the builtin error interface
func (e QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryValidationError{}

// Validate checks the field values on Queries with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Queries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Queries with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QueriesMultiError, or nil if none found.
func (m *Queries) ValidateAll() error {
	return m.validate(true)
}

func (m *Queries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Color

	// no validation rules for Datasource

	// no validation rules for Name

	// no validation rules for Qtype

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueriesValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueriesValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueriesValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Unit

	if len(errors) > 0 {
		return QueriesMultiError(errors)
	}

	return nil
}

// QueriesMultiError is an error wrapping multiple validation errors returned
// by Queries.ValidateAll() if the designated constraints aren't met.
type QueriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueriesMultiError) AllErrors() []error { return m }

// QueriesValidationError is the validation error returned by Queries.Validate
// if the designated constraints aren't met.
type QueriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueriesValidationError) ErrorName() string { return "QueriesValidationError" }

// Error satisfies the builtin error interface
func (e QueriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueriesValidationError{}

// Validate checks the field values on Charts with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Charts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Charts with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChartsMultiError, or nil if none found.
func (m *Charts) ValidateAll() error {
	return m.validate(true)
}

func (m *Charts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Extend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Extend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartsValidationError{
				field:  "Extend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartsValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetPos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartsValidationError{
					field:  "Pos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartsValidationError{
				field:  "Pos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChartsValidationError{
						field:  fmt.Sprintf("Queries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChartsValidationError{
						field:  fmt.Sprintf("Queries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChartsValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Type

	if len(errors) > 0 {
		return ChartsMultiError(errors)
	}

	return nil
}

// ChartsMultiError is an error wrapping multiple validation errors returned by
// Charts.ValidateAll() if the designated constraints aren't met.
type ChartsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChartsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChartsMultiError) AllErrors() []error { return m }

// ChartsValidationError is the validation error returned by Charts.Validate if
// the designated constraints aren't met.
type ChartsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartsValidationError) ErrorName() string { return "ChartsValidationError" }

// Error satisfies the builtin error interface
func (e ChartsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartsValidationError{}

// Validate checks the field values on Defaultval with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Defaultval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Defaultval with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DefaultvalMultiError, or
// nil if none found.
func (m *Defaultval) ValidateAll() error {
	return m.validate(true)
}

func (m *Defaultval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Value

	if len(errors) > 0 {
		return DefaultvalMultiError(errors)
	}

	return nil
}

// DefaultvalMultiError is an error wrapping multiple validation errors
// returned by Defaultval.ValidateAll() if the designated constraints aren't met.
type DefaultvalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultvalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultvalMultiError) AllErrors() []error { return m }

// DefaultvalValidationError is the validation error returned by
// Defaultval.Validate if the designated constraints aren't met.
type DefaultvalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultvalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultvalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultvalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultvalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultvalValidationError) ErrorName() string { return "DefaultvalValidationError" }

// Error satisfies the builtin error interface
func (e DefaultvalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultvalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultvalValidationError{}

// Validate checks the field values on Definition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Definition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Definition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DefinitionMultiError, or
// nil if none found.
func (m *Definition) ValidateAll() error {
	return m.validate(true)
}

func (m *Definition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefaultVal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DefinitionValidationError{
					field:  "DefaultVal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DefinitionValidationError{
					field:  "DefaultVal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DefinitionValidationError{
				field:  "DefaultVal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Field

	// no validation rules for Metric

	// no validation rules for Object

	// no validation rules for Tag

	// no validation rules for Value

	if len(errors) > 0 {
		return DefinitionMultiError(errors)
	}

	return nil
}

// DefinitionMultiError is an error wrapping multiple validation errors
// returned by Definition.ValidateAll() if the designated constraints aren't met.
type DefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefinitionMultiError) AllErrors() []error { return m }

// DefinitionValidationError is the validation error returned by
// Definition.Validate if the designated constraints aren't met.
type DefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefinitionValidationError) ErrorName() string { return "DefinitionValidationError" }

// Error satisfies the builtin error interface
func (e DefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefinitionValidationError{}

// Validate checks the field values on Vars with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Vars) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vars with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VarsMultiError, or nil if none found.
func (m *Vars) ValidateAll() error {
	return m.validate(true)
}

func (m *Vars) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Datasource

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VarsValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VarsValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VarsValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hide

	// no validation rules for Name

	// no validation rules for Seq

	// no validation rules for Type

	// no validation rules for ValueSort

	if len(errors) > 0 {
		return VarsMultiError(errors)
	}

	return nil
}

// VarsMultiError is an error wrapping multiple validation errors returned by
// Vars.ValidateAll() if the designated constraints aren't met.
type VarsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VarsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VarsMultiError) AllErrors() []error { return m }

// VarsValidationError is the validation error returned by Vars.Validate if the
// designated constraints aren't met.
type VarsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VarsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VarsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VarsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VarsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VarsValidationError) ErrorName() string { return "VarsValidationError" }

// Error satisfies the builtin error interface
func (e VarsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVars.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VarsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VarsValidationError{}

// Validate checks the field values on Main with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Main) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Main with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MainMultiError, or nil if none found.
func (m *Main) ValidateAll() error {
	return m.validate(true)
}

func (m *Main) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MainValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MainValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MainValidationError{
					field:  fmt.Sprintf("Charts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Type

	for idx, item := range m.GetVars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MainValidationError{
						field:  fmt.Sprintf("Vars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MainValidationError{
						field:  fmt.Sprintf("Vars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MainValidationError{
					field:  fmt.Sprintf("Vars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MainMultiError(errors)
	}

	return nil
}

// MainMultiError is an error wrapping multiple validation errors returned by
// Main.ValidateAll() if the designated constraints aren't met.
type MainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MainMultiError) AllErrors() []error { return m }

// MainValidationError is the validation error returned by Main.Validate if the
// designated constraints aren't met.
type MainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MainValidationError) ErrorName() string { return "MainValidationError" }

// Error satisfies the builtin error interface
func (e MainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MainValidationError{}

// Validate checks the field values on Taginfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Taginfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Taginfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaginfoMultiError, or nil if none found.
func (m *Taginfo) ValidateAll() error {
	return m.validate(true)
}

func (m *Taginfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return TaginfoMultiError(errors)
	}

	return nil
}

// TaginfoMultiError is an error wrapping multiple validation errors returned
// by Taginfo.ValidateAll() if the designated constraints aren't met.
type TaginfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaginfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaginfoMultiError) AllErrors() []error { return m }

// TaginfoValidationError is the validation error returned by Taginfo.Validate
// if the designated constraints aren't met.
type TaginfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaginfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaginfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaginfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaginfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaginfoValidationError) ErrorName() string { return "TaginfoValidationError" }

// Error satisfies the builtin error interface
func (e TaginfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaginfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaginfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaginfoValidationError{}
