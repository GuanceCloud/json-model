// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/monitor/v1alpha1/monitor.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Monitor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Monitor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Monitor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MonitorMultiError, or nil if none found.
func (m *Monitor) ValidateAll() error {
	return m.validate(true)
}

func (m *Monitor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "Extend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "Extend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorValidationError{
				field:  "Extend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJsonScript()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "JsonScript",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "JsonScript",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJsonScript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorValidationError{
				field:  "JsonScript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MonitorName

	if len(errors) > 0 {
		return MonitorMultiError(errors)
	}

	return nil
}

// MonitorMultiError is an error wrapping multiple validation errors returned
// by Monitor.ValidateAll() if the designated constraints aren't met.
type MonitorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorMultiError) AllErrors() []error { return m }

// MonitorValidationError is the validation error returned by Monitor.Validate
// if the designated constraints aren't met.
type MonitorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorValidationError) ErrorName() string { return "MonitorValidationError" }

// Error satisfies the builtin error interface
func (e MonitorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorValidationError{}

// Validate checks the field values on Children with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Children) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Children with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChildrenMultiError, or nil
// if none found.
func (m *Children) ValidateAll() error {
	return m.validate(true)
}

func (m *Children) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for Code

	// no validation rules for DataSource

	// no validation rules for Field

	// no validation rules for FieldFunc

	// no validation rules for FieldType

	// no validation rules for GroupByTime

	// no validation rules for Namespace

	// no validation rules for Q

	// no validation rules for Type

	if len(errors) > 0 {
		return ChildrenMultiError(errors)
	}

	return nil
}

// ChildrenMultiError is an error wrapping multiple validation errors returned
// by Children.ValidateAll() if the designated constraints aren't met.
type ChildrenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildrenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildrenMultiError) AllErrors() []error { return m }

// ChildrenValidationError is the validation error returned by
// Children.Validate if the designated constraints aren't met.
type ChildrenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildrenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildrenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildrenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildrenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildrenValidationError) ErrorName() string { return "ChildrenValidationError" }

// Error satisfies the builtin error interface
func (e ChildrenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildren.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildrenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildrenValidationError{}

// Validate checks the field values on Query with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Query) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Query with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QueryMultiError, or nil if none found.
func (m *Query) ValidateAll() error {
	return m.validate(true)
}

func (m *Query) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Code

	// no validation rules for Expression

	// no validation rules for Q

	// no validation rules for Type

	if len(errors) > 0 {
		return QueryMultiError(errors)
	}

	return nil
}

// QueryMultiError is an error wrapping multiple validation errors returned by
// Query.ValidateAll() if the designated constraints aren't met.
type QueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMultiError) AllErrors() []error { return m }

// QueryValidationError is the validation error returned by Query.Validate if
// the designated constraints aren't met.
type QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryValidationError) ErrorName() string { return "QueryValidationError" }

// Error satisfies the builtin error interface
func (e QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryValidationError{}

// Validate checks the field values on Querylist with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Querylist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Querylist with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuerylistMultiError, or nil
// if none found.
func (m *Querylist) ValidateAll() error {
	return m.validate(true)
}

func (m *Querylist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Datasource

	// no validation rules for Qtype

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuerylistValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuerylistValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuerylistValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uuid

	if len(errors) > 0 {
		return QuerylistMultiError(errors)
	}

	return nil
}

// QuerylistMultiError is an error wrapping multiple validation errors returned
// by Querylist.ValidateAll() if the designated constraints aren't met.
type QuerylistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerylistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerylistMultiError) AllErrors() []error { return m }

// QuerylistValidationError is the validation error returned by
// Querylist.Validate if the designated constraints aren't met.
type QuerylistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerylistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerylistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerylistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerylistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerylistValidationError) ErrorName() string { return "QuerylistValidationError" }

// Error satisfies the builtin error interface
func (e QuerylistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerylist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerylistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerylistValidationError{}

// Validate checks the field values on Conditions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conditions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionsMultiError, or
// nil if none found.
func (m *Conditions) ValidateAll() error {
	return m.validate(true)
}

func (m *Conditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for Operator

	if len(errors) > 0 {
		return ConditionsMultiError(errors)
	}

	return nil
}

// ConditionsMultiError is an error wrapping multiple validation errors
// returned by Conditions.ValidateAll() if the designated constraints aren't met.
type ConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionsMultiError) AllErrors() []error { return m }

// ConditionsValidationError is the validation error returned by
// Conditions.Validate if the designated constraints aren't met.
type ConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionsValidationError) ErrorName() string { return "ConditionsValidationError" }

// Error satisfies the builtin error interface
func (e ConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionsValidationError{}

// Validate checks the field values on Rules with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rules with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RulesMultiError, or nil if none found.
func (m *Rules) ValidateAll() error {
	return m.validate(true)
}

func (m *Rules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConditionLogic

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RulesValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RulesValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RulesValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return RulesMultiError(errors)
	}

	return nil
}

// RulesMultiError is an error wrapping multiple validation errors returned by
// Rules.ValidateAll() if the designated constraints aren't met.
type RulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RulesMultiError) AllErrors() []error { return m }

// RulesValidationError is the validation error returned by Rules.Validate if
// the designated constraints aren't met.
type RulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RulesValidationError) ErrorName() string { return "RulesValidationError" }

// Error satisfies the builtin error interface
func (e RulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RulesValidationError{}

// Validate checks the field values on Extend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExtendMultiError, or nil if none found.
func (m *Extend) ValidateAll() error {
	return m.validate(true)
}

func (m *Extend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FuncName

	for idx, item := range m.GetQuerylist() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtendValidationError{
						field:  fmt.Sprintf("Querylist[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtendValidationError{
						field:  fmt.Sprintf("Querylist[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtendValidationError{
					field:  fmt.Sprintf("Querylist[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtendValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtendValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtendValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtendMultiError(errors)
	}

	return nil
}

// ExtendMultiError is an error wrapping multiple validation errors returned by
// Extend.ValidateAll() if the designated constraints aren't met.
type ExtendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtendMultiError) AllErrors() []error { return m }

// ExtendValidationError is the validation error returned by Extend.Validate if
// the designated constraints aren't met.
type ExtendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendValidationError) ErrorName() string { return "ExtendValidationError" }

// Error satisfies the builtin error interface
func (e ExtendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendValidationError{}

// Validate checks the field values on CheckerOpt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckerOpt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckerOpt with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckerOptMultiError, or
// nil if none found.
func (m *CheckerOpt) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckerOpt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckerOptValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckerOptValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckerOptValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckerOptMultiError(errors)
	}

	return nil
}

// CheckerOptMultiError is an error wrapping multiple validation errors
// returned by CheckerOpt.ValidateAll() if the designated constraints aren't met.
type CheckerOptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckerOptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckerOptMultiError) AllErrors() []error { return m }

// CheckerOptValidationError is the validation error returned by
// CheckerOpt.Validate if the designated constraints aren't met.
type CheckerOptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckerOptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckerOptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckerOptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckerOptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckerOptValidationError) ErrorName() string { return "CheckerOptValidationError" }

// Error satisfies the builtin error interface
func (e CheckerOptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckerOpt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckerOptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckerOptValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for Dql

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on JsonScript with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JsonScript) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JsonScript with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JsonScriptMultiError, or
// nil if none found.
func (m *JsonScript) ValidateAll() error {
	return m.validate(true)
}

func (m *JsonScript) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckerOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JsonScriptValidationError{
					field:  "CheckerOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JsonScriptValidationError{
					field:  "CheckerOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckerOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JsonScriptValidationError{
				field:  "CheckerOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Every

	// no validation rules for Interval

	// no validation rules for Message

	// no validation rules for RecoverNeedPeriodCount

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JsonScriptValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JsonScriptValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JsonScriptValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Title

	// no validation rules for Type

	if len(errors) > 0 {
		return JsonScriptMultiError(errors)
	}

	return nil
}

// JsonScriptMultiError is an error wrapping multiple validation errors
// returned by JsonScript.ValidateAll() if the designated constraints aren't met.
type JsonScriptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JsonScriptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JsonScriptMultiError) AllErrors() []error { return m }

// JsonScriptValidationError is the validation error returned by
// JsonScript.Validate if the designated constraints aren't met.
type JsonScriptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JsonScriptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JsonScriptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JsonScriptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JsonScriptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JsonScriptValidationError) ErrorName() string { return "JsonScriptValidationError" }

// Error satisfies the builtin error interface
func (e JsonScriptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJsonScript.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JsonScriptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JsonScriptValidationError{}
